; This REPL file sets up a REPL environment suitable for testing the faucet
; module. To see the actual tests, please refer to the faucet.repl file.
;
; As we set up our environment we'll learn a number of useful REPL-only
; functions that you can use when writing your own contracts. You'll also learn
; how to map Chainweb concepts to the REPL environment (such as setting
; transaction data or signing transactions). In the rest of this file we will:
;
; 1. Initialize the REPL session
; 2. Load the contract and its dependencies
; 3. Create and fund test accounts
; 4. Set up diagnostics for gas consumption
; 5. Print summary information
;
; You can execute this file from the command line with:
;   $ pact faucet.setup.repl
;
; Alternately, to execute this file and remain in the REPL so you can interact
; with the running program, run `pact` in the terminal and then:
;   pact> (load "faucet.setup.repl")
;
; Once loaded, you can call functions from the faucet contract. For example, to
; sign a transaction that requests 20 KDA for the 'user' account:
;  pact> (env-sigs [{"key": "goliath-faucet-public-key", "caps": [(coin.TRANSFER "goliath-faucet" "user" 20.0)]}])
;  pact> (free.goliath-faucet.request-funds "user" (describe-keyset "free.user-keyset") 20.0)

; --------------------
; 1. Initialize the REPL session
; --------------------

; The REPL environment allows us to execute Pact code and inspect the results.
; We can use it to simulate how our contract will behave once deployed to
; Chainweb. However: we aren't actually using Chainweb. That means there
; technically are no nodes, no transactions, no keysets, no existing contracts,
; and so on. Therefore we must set up our REPL environment so that it includes
; data that our contract would expect to exist.
;
; We'll begin with namespaces. All Pact modules must exist within a namespace on
; Chainweb, except for basic contracts provided by Kadena. There are two
; namespaces available for anyone to use on Chainweb: the 'free' namespace and
; the 'user' namespace. Our contract uses the "free" namespace, so we need to
; make sure it exists in our REPL environment. We can define a namespace using
; (define-namespace):
; https://pact-language.readthedocs.io/en/stable/pact-functions.html#define-namespace
;
; Defining a namespace requires that we provide two keysets. The first keyset is
; a user's keyset, such as the faucet account, and it indicates that the user
; must have signed any transaction that deploys code to the given namespace. The
; second keyset is the namespace admin's keyset, and it indicates that the admin
; must sign the transaction that creates the new namespace.
;
; In practice, you only need to care about any of this if the Kadena team grants
; you a namespace of your own. In the REPL environment we will simply mock
; creating the "free" namespace.

; Let's build the the transaction that will create the "free" namespace. We will
; use a mock namespace admin keyset and mock user keyset to approve contracts
; and keysets that will be deployed & defined in the "free" namespace. We will
; set both of these keysets to have no keys at all, which will make them
; trivially approve everything.
;
; Since neither of these keysets exist on Chainweb, we need to provide them via
; the transaction data. We can associate data with a transaction using the
; (env-data) repl-only function.
; https://pact-language.readthedocs.io/en/stable/pact-functions.html#env-data
(env-data { "namespace-keyset": { "keys": [ ], "pred": "keys-all" }, "test-keyset": { "keys": [ ], "pred": "keys-all" } })

; One last thing before we execute our new transaction: we are going to wrap
; each logical step in our REPL session in (begin-tx) and (commit-tx). This
; mimics executing a transaction on chain. It also allows us to run a few steps
; and then undo them without committing via the (rollback-tx) function. Once a
; transaction has been committed it cannot be rolled back.
; https://pact-language.readthedocs.io/en/latest/pact-functions.html#begin-tx
; https://pact-language.readthedocs.io/en/latest/pact-functions.html#commit-tx
; https://pact-language.readthedocs.io/en/latest/pact-functions.html#rollback-tx
;
; You might expect that (env-data) would be used within a transaction, since it
; mimics a transaction payload. Alas, this function is run at the top-level and
; applies to every transaction until you set new (env-data). While it breaks the
; mental model of transaction data applying to one transaction, it's convenient.
(begin-tx)
; Our transaction simply consists of sending the below code to a Chainweb node
; for execution, where (read-keyset) is used to read keysets from the
; transaction data which we assigned with (env-data).
(define-namespace "free" (read-keyset "test-keyset") (read-keyset "namespace-keyset"))
(commit-tx)
; It's a good practice to clear the (env-data) after each transaction so that it
; is explicit what you expect to be in the transaction data for a particular
; transaction. Through the rest of the REPL files we'll bracket transactions
; with calls to set and then clear (env-data).
(env-data {})

; Now that the "free" namespace exists, let's move on to other data that our
; contract expects to exist on-chain.
;
; Our contract uses the (transfer-create) function from the coin-v5 contract.
; That contract implements the fungible-v2 and fungible-xchain-v1 interfaces.
; Our contract therefore expects that all three of these contracts have been
; deployed to Chainweb.
;
; To "deploy" a contract in the repl, use the (load) function:
; https://pact-language.readthedocs.io/en/latest/pact-functions.html#load
;
; The (load) function takes a filepath. For that reason, we've saved copies
; of the fungible-v2, fungible-xchain-v1, and coin-v5 contracts in the 'root'
; directory in our project. This is a convention for storing contracts that are
; external to your project and deployed on Chainweb but which you need access
; to in your tests.
(begin-tx)
(load "./root/fungible-v2.pact")
(load "./root/fungible-xchain-v1.pact")
(load "./root/coin-v5.pact")
; If a module contains tables, then they need to be created when you deploy the
; contract. Our faucet contract includes table initialization in the contract,
; but the coin contract doesn't.
;
; The coin-v5 contract defines two tables (you can find them by looking for
; calls to the (deftable) function in the contract). Note: these contracts use
; the root namespace, which means you must refer to them directly by their name
; with no 'free', 'user', or other prefix.
(create-table coin.coin-table)
(create-table coin.allocation-table)
(commit-tx)

; ----------------------------------------
; 2. Load the contract
; ----------------------------------------

; We've now ensured that all data our contract expects to exist on-chain has
; been loaded into the REPL environment. We can now deploy our own contract and
; begin testing it.
;
; Recall that our contract expects to read a keyset from the deployment
; transaction data at the key "goliath-faucet-keyset" so it can register the
; keyset on Chainweb. The initialization step also expects an "upgrade" key that
; tells it whether to create tables or not. We must therefore include both
; fields in our transaction data.
(env-data { "goliath-faucet-keyset": { "keys": [ "goliath-faucet-public-key" ], "pred": "keys-all" }, "upgrade": false })
; Our contract also includes a safety check that ensures that the keys in the
; keyset that we're registering were also used to sign the deployment
; transaction. We can simulate signing a transaction using the (env-sigs)
; REPL-only function:
; https://pact-language.readthedocs.io/en/latest/pact-functions.html#env-sigs
;
; Below, we indicate that the private key associated with the goliath-faucet
; public key has been used to sign this transaction. The "caps" field is for
; listing capabilities that we would like to scope our signature to; we'll see
; how this is used a little later on.
(env-sigs [{"key": "goliath-faucet-public-key", "caps": []}])
(begin-tx)
(load "./faucet.pact")
(commit-tx)
(env-sigs [])
(env-data {})

; ----------------------------------------
; 3. Perform test setup by creating and funding accounts
; ----------------------------------------

; Voila! We've now "deployed" our contract and can begin interacting with it.
;
; With our contract and its dependencies loaded, we can technically begin
; calling our contract API. However, our faucet contract is all about
; transferring funds among accounts, and no accounts yet exist in our test
; environment. With no accounts and no money, our faucet can't do anything.
;
; Let's create and fund our faucet account and test user account!
;
; A Kadena account pairs an address (such as "k:12345" or "alice") with a keyset
; (a guard that determines what keys control the account). Before we can create
; our test accounts we need to have a keyset for each one.
;
; We need two accounts for our tests. We need the faucet account, which
; distributes funds to users, and we need at least one user account so it can
; request funds. We've already defined the faucet keyset during our contract
; deployment, but we haven't yet defined a keyset for the user account.
(env-data { "user-keyset": { "keys": [ "user-public-key" ], "pred": "keys-all" } })
(begin-tx)
(namespace "free")
(define-keyset "free.user-keyset" (read-keyset "user-keyset"))
(commit-tx)
(env-data {})

; Accounts can be created on Chainweb using the (coin.create-account) function,
; or by transferring funds to the account with (coin.transfer-create). In our
; case we don't have any funds to transfer, so we'll use (coin.create-account)
; and then magically produce some funds with (coin.coinbase).
(begin-tx)
(coin.create-account "goliath-faucet" (describe-keyset "free.goliath-faucet-keyset"))
; Next, we need to ensure these accounts have some funds. On Chainweb, you can
; get funds from one of two places: someone transfers you KDA, or you mine the
; KDA yourself. We don't have access to either source of funding in the REPL,
; but we can simulate mining KDA by referring again to the coin contract.
;
; The coin contract includes a (coinbase) function that is used to reward miners
; by minting KDA and distributing it to them when they mine a block. We can't
; call this function on Chainweb because it is protected by the COINBASE
; capability:
; https://github.com/kadena-io/chainweb-node/blob/4dc69750eeffbf6eb2ce901b3d951534cc98e9be/pact/coin-contract/coin.pact#L324
;
; A function protected by a call to (require-capability) cannot be called from
; outside the module, because capabilities can only be granted within the module
; that defined the capability. However, in the REPL environment we have access
; to a special function to magically grant ourselves a capability:
; https://pact-language.readthedocs.io/en/latest/pact-functions.html#test-capability
;
; Let's use it to give ourselves the COINBASE capability.
(test-capability (coin.COINBASE))
; Now that we've been granted the COINBASE capability we can call the (coinbase)
; function. Let's use it to mint KDA and provide it to the faucet account.
(coin.coinbase "goliath-faucet" (describe-keyset "free.goliath-faucet-keyset") 1000.0)
(commit-tx)

; --------------------
; 4. Set up diagnostics for gas consumption
; --------------------

; One of the most important concepts when building a dapp on a blockchain like
; Chainweb is gas: computations on chain cost gas, which is paid for using KDA.
; This cost is either paid by users of the dapp or on the user's behalf by the
; dapp itself. Either way, if you create a dapp, you need to be able to estimate
; the cost of running your contracts.
;
; The Pact REPL  provides a handy way to measure gas consumption in a contract
; via the (env-gas*) family of functions.
; https://pact-language.readthedocs.io/en/latest/pact-functions.html#env-gas
;
;   * (env-gasmodel) lets you specify how to store record of gas consumption,
;     which you have to set up before taking any measurements.
;   * (env-gaslog) lets you measure gas consumption over a specific block.
;   * (env-gas) lets you read the current gas count if provided no arguments,
;     and lets you manually set the gas count if provided an integer (such as 0
;     to reset the counter to 0).
;   * (env-gaslimit) lets you set a limit to the units of gas that can be
;     consumed in the REPL session. It will throw an error if exceeded. The
;     maximum gas that can be consumed in a single transaction is 150000. That
;     can be useful limit to set when you want to measure a single .pact file
;     and see how much gas it would cost to execute the entire thing in one
;     transaction on Chainweb.
;
; From this point on, we'll measure the amount of gas consumed by various calls
; to our contract. For context, a "slow" transaction on Chainweb costs about
; 0.01 KDA per million units of gas.
;
; Note that gas consumption depends in part on the size of the Pact code sent
; to Chainweb, whether you are using transaction data for the arguments or
; inlining the arguments into the Pact code, and so on. It's always a good idea
; to treat gas measurements as estimates and round them up by at least 1% when
; submitting requests to Chainweb.
(env-gasmodel "table")
(env-gaslimit 150000)

; --------------------
; 5. Print summary information
; --------------------

; Our setup is complete: we have a REPL environment that mimics the Chainweb
; environment that our contract will run in. Let's print out some summary
; information that describes the environment we just created.
(print "----------")
(print "'goliath-faucet' account created:\n  - keyset: 'goliath-faucet-keyset'\n  - public key: 'goliath-faucet-public-key'\n  - balance: 1000.0 KDA")
(print "'user' account created:\n  - keyset: 'user-keyset'\n  - public key: 'user-public-key'\n  - balance: 0.0 KDA")
(print "----------")

; With our setup complete, you should read the faucet.repl file, which uses this
; environment to implement a variety of tests for our 'goliath-faucet module.
